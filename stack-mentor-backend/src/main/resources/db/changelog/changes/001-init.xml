<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd">

    <changeSet id="001" author="fabian-legair">
        <sql>

            CREATE TABLE users (
            user_id UUID PRIMARY KEY,
            username VARCHAR(16) UNIQUE NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            phone_number VARCHAR(15) UNIQUE,
            password_hash VARCHAR(255) NOT NULL,
            first_name VARCHAR(30) NOT NULL,
            last_name VARCHAR(30) NOT NULL,
            date_of_birth DATE,
            city VARCHAR(50),
            state VARCHAR(2),
            age INT,
            profile_picture_url VARCHAR(255),
            bio TEXT,
            role varchar(10) CHECK (role IN ('mentor', 'mentee')) NOT NULL,
            job_title VARCHAR(100),
            years_of_experience INT,
            industry VARCHAR(100),
            skills TEXT,
            interests TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            position VARCHAR(10) CHECK (position IN ('admin', 'moderator', 'member')) NOT NULL,
            is_verified BOOLEAN DEFAULT FALSE
            );

            CREATE TABLE groups (
            group_id UUID PRIMARY KEY,
            group_name VARCHAR(50) NOT NULL,
            description TEXT,
            created_by UUID REFERENCES users(user_id) ON DELETE SET NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            members TEXT -- Comma-separated list of user IDs
            );

            CREATE TABLE group_members (
            group_id UUID REFERENCES groups(group_id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
            role VARCHAR(20) DEFAULT 'member', -- e.g., 'admin', 'member'
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (group_id, user_id)
            );

            CREATE TABLE conversations (
            conversation_id UUID PRIMARY KEY,
            type varchar(10) CHECK (type IN ('private', 'group')) NOT NULL,
            group_id UUID REFERENCES groups(group_id) ON DELETE CASCADE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE direct_conversation_participants (
            conversation_id UUID REFERENCES conversations(conversation_id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
            PRIMARY KEY (conversation_id, user_id)
            );

            CREATE TABLE messages (
            message_id UUID PRIMARY KEY,
            conversation_id UUID REFERENCES conversations(conversation_id) ON DELETE CASCADE,
            sender_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
            content TEXT NOT NULL,
            media_url VARCHAR(255),
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE message_read_status (
            message_id UUID REFERENCES messages(message_id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
            read_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (message_id, user_id)
            );

            CREATE TABLE verification_tokens (
            token_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            token VARCHAR(255) NOT NULL,
            user_id UUID UNIQUE NOT NULL,
            expiry_date TIMESTAMP NOT NULL,
            CONSTRAINT fk_user
            FOREIGN KEY(user_id)
            REFERENCES users(user_id)
            ON DELETE CASCADE
            );

        </sql>
    </changeSet>
</databaseChangeLog>